name: Check new policy

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      environment:
        description: 'The environment to build'
        required: true
        type: string
      aws_account_id:
        description: 'The AWS account id'
        required: true
        type: string
      role_to_assume:
        description: 'AWS Role to Assume'
        required: true
        type: string
      working_dir:
        description: 'The directory of the Lambda function (e.g. services/<lambda>)'
        required: false
        default: '.'
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  check-new-policy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}/tf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Debug AWS credentials configuration
        run: aws sts get-caller-identity

      - name: Check for modified JSON & TF files
        id: check-modified-files
        shell: bash
        env:
          WORKING_DIR: ${{ inputs.working_dir }}
        run: |
          # 1) JSON diffs
          modified_json=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/[^/]*\.json$" || true)
          if [[ -n "$modified_json" ]]; then
            echo "[INFO] JSON changed: $modified_json"
            echo "modified=true" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No policy-JSON changes"
            echo "modified=false" >> "$GITHUB_OUTPUT"
          fi

          # 2) TF diffs → basenames only
          tf_paths=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/.*\.tf$" || true)
          if [[ -n "$tf_paths" ]]; then
            echo "[INFO] TF changed: $tf_paths"
            echo "tf-modified=true" >> "$GITHUB_OUTPUT"
            tf_basenames=()
            for p in $tf_paths; do
              tf_basenames+=( "$(basename "$p")" )
            done
            echo "tf-files=${tf_basenames[*]}" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No Terraform changes"
            echo "tf-modified=false" >> "$GITHUB_OUTPUT"
            echo "tf-files=" >> "$GITHUB_OUTPUT"
          fi

          # 3) Default-policy JSON diffs
          default_json=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/default-policy/.*\.json$" || true)
          if [[ -n "$default_json" ]]; then
            echo "[INFO] Default-policy JSON changed: $default_json"
            echo "default-modified=true" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No default-policy JSON changes"
            echo "default-modified=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update default policy
        if: steps.check-modified-files.outputs.default-modified == 'true'
        working-directory: ${{ inputs.working_dir }}/tf/default-policy/
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_ACCOUNT_ID: ${{ vars.ORG_AWS_ACCOUNT_ID }}
          ORG_AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          defaults=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/default-policy/.*\.json$")
          for file in $defaults; do
            base=$(basename "$file")
            [[ "$base" =~ ^(TrustPolicy|ECRCrossAccountAccessPolicy)\.json$ ]] && continue
            policy="$PROJECT_NAME-${base%.json}"
            echo "[INFO] Updating $policy from $base"
            sed -i "s|\${AWS_REGION}|$AWS_REGION|g; \
                    s|\${AWS_ACCOUNT_ID}|$AWS_ACCOUNT_ID|g; \
                    s|\${USER_NAME}|$GITHUB_REPOSITORY_OWNER|g; \
                    s|\${ORG_AWS_ACCOUNT_ID}|$ORG_AWS_ACCOUNT_ID|g; \
                    s|\${ORG_AWS_REGION}|$ORG_AWS_REGION|g; \
                    s|\${PROJECT_NAME}|$PROJECT_NAME|g" "$base"
            versions=$(aws iam list-policy-versions \
              --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy" \
              --query 'Versions[?IsDefaultVersion==`false`].VersionId' \
              --output text)
            for v in $versions; do
              aws iam delete-policy-version \
                --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy" \
                --version-id "$v"
            done
            aws iam create-policy-version \
              --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy" \
              --policy-document file://"$base" \
              --set-as-default
          done

      - name: Create and attach temporary policy
        if: steps.check-modified-files.outputs.modified == 'true' || steps.check-modified-files.outputs.tf-modified == 'true'
        working-directory: ${{ inputs.working_dir }}/tf/
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_ACCOUNT_ID: ${{ vars.ORG_AWS_ACCOUNT_ID }}
          ORG_AWS_REGION: ${{ vars.AWS_REGION }}
          TF_FILES: ${{ steps.check-modified-files.outputs.tf-files }}
        run: |
          # 1) Determine JSON files to bundle
          if [[ "${{ steps.check-modified-files.outputs.modified }}" == "true" ]]; then
            mapfile -t json_paths < <(git diff --name-only HEAD~1 HEAD \
              | grep "^$WORKING_DIR/tf/[^/]*\.json$")
            files=(); for p in "${json_paths[@]}"; do files+=( "$(basename "$p")" ); done
          else
            echo "[INFO] scanning TF → JSON references via sed"
            refs=()
            for tf in $TF_FILES; do 
              # sed pulls out the .json filename from templatefile("xxx.json",...)
              while read -r f; do
                refs+=("$f")
              done < <(
                sed -nE 's/.*templatefile\("([^"]+\.json)"\,.*/\1/p' "$tf"
              )
            done
            files=( $(printf "%s\n" "${refs[@]}" | sort -u) )
          fi

          if [ ${#files[@]} -eq 0 ]; then
            echo "[INFO] no JSON to bundle → skipping CreatePolicy"
          fi

          # 2) Build the combined policy document
          ts=$(date -u +"%Y%m%d%H%M%S" -d '-6 hours')
          id=$(uuidgen | cut -c1-8)
          pol="temporary-${ts}-${id}.json"
          {
            echo '{ "Version":"2012-10-17","Statement":['
            first=true
            for f in "${files[@]}"; do
              $first && first=false || echo ","
              jq -c '.Statement[]' "$f"
            done
            echo "]}"
          } > "$pol"

          # 3) Substitute placeholders
          sed -i "s|\${AWS_REGION}|$AWS_REGION|g; \
                  s|\${AWS_ACCOUNT_ID}|$AWS_ACCOUNT_ID|g; \
                  s|\${USER_NAME}|$GITHUB_REPOSITORY_OWNER|g; \
                  s|\${ORG_AWS_ACCOUNT_ID}|$ORG_AWS_ACCOUNT_ID|g; \
                  s|\${ORG_AWS_REGION}|$ORG_AWS_REGION|g; \
                  s|\${PROJECT_NAME}|$PROJECT_NAME|g" "$pol"

          # 4) Publish
          aws iam create-policy \
            --policy-name "${pol%.json}" \
            --policy-document file://"$pol"
          aws iam attach-role-policy \
            --role-name "${PROJECT_NAME}-GitHubActionsRole" \
            --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/${pol%.json}"
