name: Check new policy

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      environment:
        description: 'The environment to build'
        required: true
        type: string
      aws_account_id:
        description: 'The AWS account id'
        required: true
        type: string
      role_to_assume:
        description: 'AWS Role to Assume'
        required: true
        type: string
      working_dir:
        description: 'The directory of the Lambda function'
        required: false
        default: '.'
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  check-new-policy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}/tf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Check for modified policy JSON files
        id: check-modified-files
        shell: bash
        env:
          WORKING_DIR: ${{ inputs.working_dir }}
        run: |
          # 1) Detect changed policy JSON files
          modified_json_paths=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/[^/]*\.json$" || true)
          if [[ -n "$modified_json_paths" ]]; then
            echo "[INFO] Modified policy JSON files: $modified_json_paths"
            echo "modified=true" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No modified policy JSON files found."
            echo "modified=false" >> "$GITHUB_OUTPUT"
          fi

          # 2) Detect any Terraform (.tf) changes, emit only basenames
          tf_paths=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/.*\.tf$" || true)
          if [[ -n "$tf_paths" ]]; then
            echo "[INFO] Terraform files changed: $tf_paths"
            echo "tf-modified=true" >> "$GITHUB_OUTPUT"

            # strip prefix, keep only basename
            basenames=()
            for path in $tf_paths; do
              basenames+=( "$(basename "$path")" )
            done
            tf_files=$(printf "%s " "${basenames[@]}")
            echo "tf-files=$tf_files" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No Terraform changes detected."
            echo "tf-modified=false" >> "$GITHUB_OUTPUT"
            echo "tf-files=" >> "$GITHUB_OUTPUT"
          fi

          # 3) Detect changed default-policy JSON files
          modified_default_paths=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/default-policy/.*\.json$" || true)
          if [[ -n "$modified_default_paths" ]]; then
            echo "[INFO] Modified default-policy JSON files: $modified_default_paths"
            echo "default-modified=true" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No modified default-policy JSON files found."
            echo "default-modified=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update default policy
        if: steps.check-modified-files.outputs.default-modified == 'true'
        working-directory: ${{ inputs.working_dir }}/tf/default-policy/
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_ACCOUNT_ID: ${{ vars.ORG_AWS_ACCOUNT_ID }}
          WORKING_DIR: ${{ inputs.working_dir }}
        run: |
          # Get modified default-policy JSON files
          modified_default_files=$(git diff --name-only HEAD~1 HEAD \
            | grep "^$WORKING_DIR/tf/default-policy/.*\.json$")

          for file in $modified_default_files; do
            base=$(basename "$file")
            # Skip TrustPolicy.json and ECRCrossAccountAccessPolicy.json
            if [[ "$base" == "TrustPolicy.json" || "$base" == "ECRCrossAccountAccessPolicy.json" ]]; then
              continue
            fi

            policy_name="$PROJECT_NAME-${base%.json}"
            echo "[INFO] Updating default policy $policy_name from $base"

            # Substitute placeholders
            sed -i "s/\${AWS_REGION}/$AWS_REGION/g; \
                    s/\${AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g; \
                    s/\${USER_NAME}/$GITHUB_REPOSITORY_OWNER/g; \
                    s/\${ORG_AWS_ACCOUNT_ID}/$ORG_AWS_ACCOUNT_ID/g; \
                    s/\${ORG_AWS_REGION}/$ORG_AWS_REGION/g; \
                    s/\${PROJECT_NAME}/$PROJECT_NAME/g" "$base"

            # Delete any old non-default versions
            versions=$(aws iam list-policy-versions \
              --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name" \
              --query 'Versions[?IsDefaultVersion==`false`].VersionId' \
              --output text)
            for v in $versions; do
              echo "[INFO] Deleting old version $v"
              aws iam delete-policy-version \
                --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name" \
                --version-id "$v"
            done

            # Create new default version
            echo "[INFO] Creating new default version of $policy_name"
            aws iam create-policy-version \
              --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name" \
              --policy-document file://"$base" \
              --set-as-default
          done

      - name: Create and attach temporary policy
        if: steps.check-modified-files.outputs.modified == 'true' || steps.check-modified-files.outputs.tf-modified == 'true'
        working-directory: ${{ inputs.working_dir }}/tf/
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_ACCOUNT_ID: ${{ vars.ORG_AWS_ACCOUNT_ID }}
          WORKING_DIR: ${{ inputs.working_dir }}
        run: |
          # 1) Generate unique temporary policy name
          timestamp=$(date -u +"%Y%m%d%H%M%S" -d '-6 hours')
          uuid=$(uuidgen | cut -c1-8)
          policy_name="temporary-${timestamp}-${uuid}"
          policy_file="${policy_name}.json"

          # 2) Decide which JSON(s) to bundle
          if [[ "${{ steps.check-modified-files.outputs.modified }}" == "true" ]]; then
            echo "[INFO] Bundling only changed JSON policies"
            mapfile -t paths < <(git diff --name-only HEAD~1 HEAD \
              | grep "^$WORKING_DIR/tf/[^/]*\.json$")
            files=()
            for p in "${paths[@]}"; do
              files+=( "$(basename "$p")" )
            done

          else
            echo "[INFO] No JSON diff; scanning TF for JSON references"
            read -r -a tf_list <<< "${{ steps.check-modified-files.outputs.tf-files }}"
            refs=()
            for tf in "${tf_list[@]}"; do
              grep -hoE 'templatefile\("([^"]+\.json)"\)' \
                "$WORKING_DIR/tf/$tf" \
                | sed -E 's/templatefile\("([^"]+)"\)/\1/' \
                | while read -r f; do refs+=("$f"); done
            done
            files=($(printf "%s\n" "${refs[@]}" | sort -u))
          fi

          echo "[INFO] Files to attach: ${files[*]}"

          # 3) Build combined temporary policy document
          echo '{ "Version":"2012-10-17", "Statement":[' > "$policy_file"
          first=true
          for f in "${files[@]}"; do
            if [[ "$first" == true ]]; then
              first=false
            else
              echo "," >> "$policy_file"
            fi
            jq -c '.Statement[]' "$f" >> "$policy_file"
          done
          echo "]}" >> "$policy_file"

          # 4) Substitute placeholders
          sed -i "s/\${AWS_REGION}/$AWS_REGION/g; \
                  s/\${AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g; \
                  s/\${USER_NAME}/$GITHUB_REPOSITORY_OWNER/g; \
                  s/\${ORG_AWS_ACCOUNT_ID}/$ORG_AWS_ACCOUNT_ID/g; \
                  s/\${ORG_AWS_REGION}/$ORG_AWS_REGION/g; \
                  s/\${PROJECT_NAME}/$PROJECT_NAME/g" "$policy_file"

          # 5) Create and attach the IAM policy
          aws iam create-policy \
            --policy-name "$policy_name" \
            --policy-document file://"$policy_file"
          aws iam attach-role-policy \
            --role-name "${PROJECT_NAME}-GitHubActionsRole" \
            --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name"
