
name: Check new policy 

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      aws_account_id:
        description: 'The AWS account id'
        required: true
        type: string
      aws_region:
        description: 'AWS Region'
        required: true
        type: string
      role_to_assume:
        description: 'AWS Role to Assume'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  check-new-policy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Check for modified policy JSON files
        id: check-modified-files
        run: |
          # Get modified policy JSON files in the 'tf' directory and exclude child directory 
          modified_files=$(git diff --name-only HEAD~1 HEAD | grep '^tf/[^/]*\.json$' || true)
          modified_default_files=$(git diff --name-only HEAD~1 HEAD | grep '^tf/default-policy/.*\.json$' || true)

          if [ -n "$modified_default_files" ]; then
            echo "[INFO] Modified default policy files found: $modified_default_files"
            echo "default-modified=true" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No modified default policy files found"
            echo "default-modified=false" >> "$GITHUB_OUTPUT"
          fi

          if [ -n "$modified_files" ]; then
            echo "[INFO] Modified policy files found: $modified_files"
            echo "modified=true" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No modified policy files found."
            echo "modified=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update default policy 
        if: steps.check-modified-files.outputs.default-modified == 'true'
        working-directory: tf/default-policy/
        env:
          PROJECT_NAME: ${{ github.event.repository.name }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ inputs.aws_region }}
          ORG_AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_ACCOUNT_ID: ${{ vars.ORG_AWS_ACCOUNT_ID }}
        run: |
          # Get the current date in the format YYYYMMDDHHMMSS with GMT-6 offset
          timestamp=$(date -u +"%Y%m%d%H%M%S" -d '-6 hours')

          # Get modified policy JSON files in the 'tf/default-policy' 
          modified_default_files=$(git diff --name-only HEAD~1 HEAD | grep '^tf/default-policy/.*\.json$')

          for file in $modified_default_files; do
            # Skip the file if it's named Trust.json
            if [[ $(basename "$file") == "TrustPolicy.json" || $(basename "$file") == "ECRCrossAccountAccessPolicy.json" ]]; then
              continue
            fi

            file_path=$(basename $file)
            policy_name="$PROJECT_NAME-$(basename $file_path .json)" 

            echo "[INFO] Replace values in policy file $file_name"
            sed -i "s/\${AWS_REGION}/$AWS_REGION/g; \
            s/\${AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g; \
            s/\${USER_NAME}/$GITHUB_REPOSITORY_OWNER/g; \
            s/\${ORG_AWS_ACCOUNT_ID}/$ORG_AWS_ACCOUNT_ID/g; \
            s/\${ORG_AWS_REGION}/$ORG_AWS_REGION/g; \
            s/\${PROJECT_NAME}/$PROJECT_NAME/g" $file_path

            # Get all versions of the policy
            policy_versions=$(aws iam list-policy-versions \
              --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name" \
              --query 'Versions[?IsDefaultVersion==`false`].VersionId' \
              --output text)

            # Loop through old versions and delete them
            for version_id in $policy_versions; do
              echo "[INFO] Deleting old version: $version_id"
              aws iam delete-policy-version \
                --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name" \
                --version-id "$version_id"
            done

            echo "[INFO] Update $policy_name with new version"
            aws iam create-policy-version \
            --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name" \
            --policy-document file://$file_path \
            --set-as-default
          done

      - name: Create and attach temporary policy
        if: steps.check-modified-files.outputs.modified == 'true'
        working-directory: tf/
        env:
          PROJECT_NAME: ${{ github.event.repository.name }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
          AWS_REGION: ${{ inputs.aws_region }}
          ORG_AWS_REGION: ${{ vars.AWS_REGION }}
          ORG_AWS_ACCOUNT_ID: ${{ vars.ORG_AWS_ACCOUNT_ID }}
        run: |
          # Get the current date in the format YYYYMMDDHHMMSS with GMT-6 offset
          timestamp=$(date -u +"%Y%m%d%H%M%S" -d '-6 hours')

          # GitHubActionsRole
          github_action_role="$PROJECT_NAME-GitHubActionsRole"

          # Get modified policy JSON files in the 'tf' directory and exclude child directory 
          modified_files=$(git diff --name-only HEAD~1 HEAD | grep '^tf/[^/]*\.json$')
          policy_file="temporary-$timestamp.json"
          policy_name="temporary-$timestamp"

          echo '{
            "Version": "2012-10-17",
            "Statement": [' > $policy_file

          first_file=true

          # Process each file
          for file in "${modified_files[@]}"; do
            # Check if file exists
          file_name=$(basename "$file")
            echo "[INFO] Processing: $file_name"
            if [ ! -f "$file_name" ]; then
              echo "Error: File $file not found"
              continue
            fi

            # Extract the Statement array from each policy file and append
            if [ "$first_file" = true ]; then
              first_file=false
            else
              echo "," >> $policy_file
            fi

            jq -r '.Statement[]' "$file_name" | \
            while IFS= read -r line; do
              echo "$line" >> $policy_file
            done
          done

          # Close the JSON structure
          echo '
            ]
          }' >> $policy_file

          # Format the final JSON file nicely
          jq '.' $policy_file > temp.json && mv temp.json $policy_file


          sed -i "s/\${AWS_REGION}/$AWS_REGION/g; \
          s/\${AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g; \
          s/\${USER_NAME}/$GITHUB_REPOSITORY_OWNER/g; \
          s/\${ORG_AWS_ACCOUNT_ID}/$ORG_AWS_ACCOUNT_ID/g; \
          s/\${ORG_AWS_REGION}/$ORG_AWS_REGION/g; \
          s/\${PROJECT_NAME}/$PROJECT_NAME/g" $policy_file
          
          echo "[INFO] Create policy $policy_name"
          aws iam create-policy \
            --policy-name $policy_name \
            --policy-document file://$policy_file
          
          # Attach policy to the GitHubActionsRole
          echo "[INFO] Attach $policy_name to $github_action_role" 
          aws iam attach-role-policy \
            --role-name $github_action_role \
            --policy-arn "arn:aws:iam::$AWS_ACCOUNT_ID:policy/$policy_name"
