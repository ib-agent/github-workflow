name: Deploy Glue Code

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      working_dir:
        description: 'The directory of the glue job function'
        required: false
        default: '.'
        type: string
      role_to_assume:
        description: 'the aws role to assume'
        required: false
        default: ''
        type: string


permissions:
  id-token: write
  contents: read

jobs:

  upload:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_dir }}
    outputs:
      checksum: ${{ steps.checksum.outputs.checksum }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set artifact name based on working directory
        id: set_artifact_name
        run: |
          if [ "${{ inputs.working_dir }}" = "." ]; then
            echo "artifact_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          else
            ARTIFACT_NAME=$(basename ${{ inputs.working_dir }})
            echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Zip Lambda function
        run: |
          cd app
          zip -r ../${{ steps.set_artifact_name.outputs.artifact_name }}.zip .

      - name: Set role if not provided
        id: set_role
        run: |
          if [ -z "${{ inputs.role_to_assume }}" ]; then
            echo "role=${{ vars.ROLE_TO_ASSUME }}" >> "$GITHUB_OUTPUT"
          else
            echo "role=${{ inputs.role_to_assume }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set_role.outputs.role }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload zip file to S3
        run: |
          aws s3 cp ${{ steps.set_artifact_name.outputs.artifact_name }}.zip s3://cabernetai-glue-${{ vars.AWS_ACCOUNT_ID }}/${{ steps.set_artifact_name.outputs.artifact_name }}/scripts/
          aws s3 cp app/main.py s3://cabernetai-glue-${{ vars.AWS_ACCOUNT_ID }}/${{ steps.set_artifact_name.outputs.artifact_name }}/scripts/
