name: Post Deployment Tests Lambda Monorepo 

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: string

permissions:
  id-token: write
  contents: write 

jobs:
  # trigger_smoke_test:
  #   environment: ${{ inputs.environment }}
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Get Commit and PR Info
  #       id: context_info
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.GH_TOKEN }}
  #         script: |
  #           const isPR = context.eventName === "pull_request";
  #           const author =
  #           context.actor ||
  #           (await github.rest.repos
  #             .getCommit({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               ref: context.sha,
  #             }))
  #             .data.author?.login ||
  #           (await github.rest.repos
  #             .getCommit({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               ref: context.sha,
  #             }))
  #             .data.commit.author.name;
  #           core.setOutput("commit_sha", context.sha);
  #           core.setOutput("repository", `${context.repo.owner}/${context.repo.repo}`);
  #           core.setOutput("actor", author);
  #           core.setOutput("branch_ref", context.ref)
  #           core.setOutput("pr_number", isPR ? context.payload.pull_request.number.toString() : "");

      # - name: Trigger Smoke Test Validation
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GH_TOKEN }}
      #     script: |
      #       try {
      #         const result = await github.rest.actions.createWorkflowDispatch({
      #           owner: 'ib-agent',
      #           repo: 'github-workflow',
      #           workflow_id: 'trigger-smoke-test.yaml',
      #           ref: 'main',
      #           inputs: {
      #             environment: "${{ inputs.environment }}",
      #             commit_sha: "${{ steps.context_info.outputs.commit_sha }}",
      #             repository: "${{ steps.context_info.outputs.repository }}",
      #             actor: "${{ steps.context_info.outputs.actor }}",
      #             branch_ref: "${{ steps.context_info.outputs.branch_ref }}",
      #             pr_number: "${{ steps.context_info.outputs.pr_number }}"
      #           }
      #         });
      #         console.log(result);
      #       } catch(error) {
      #         console.error(error);
      #         core.setFailed(error);
      #       }

  trigger_ui_test:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: cd tests/ui && npm i 

      - name: Install Playwright Browsers
        run: cd tests/ui && npx playwright install --with-deps

      - name: Capture UI state
        id: capture
        run: |
          # run our script and capture its console.log lines into outputs
          echo "Running capture UI state"
          node ./tests/ui/test-ui-e2e.js >> $GITHUB_OUTPUT

        env:
          UI_APP_URL: ${{ vars.UI_APP_URL }}
          TEST_EMAIL: ${{ secrets.UI_TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.UI_TEST_PASSWORD }}

      - name: Upload screenshot as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshot
          path: screenshot.png

      - name: Find PR number for this commit
        id: find_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // find the run so we can grab head_sha
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const head = run.data.head_sha;
            // list PRs for that SHA
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: head
            });
            if (prs.length === 0) {
              throw new Error(`No PR found for commit ${head}`);
            }
            return prs[0].number;

      - name: Comment or update on the PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ steps.find_pr.outputs.result }}
          identifier: ui-post-deployment
          body: |
            ## ðŸ“¸ UI Postâ€‘Deployment Test
            **Page URL:** ${{ steps.capture.outputs.url }}
            <details>
            <summary>Test UI screenshot</summary>

            ![final](data:image/png;base64,${{ steps.capture.outputs.img }})
            </details>
