name: Post Deployment Tests Lambda Monorepo 

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: string

permissions:
  id-token: write
  contents: write 

jobs:
  # trigger_smoke_test:
  #   environment: ${{ inputs.environment }}
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Get Commit and PR Info
  #       id: context_info
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.GH_TOKEN }}
  #         script: |
  #           const isPR = context.eventName === "pull_request";
  #           const author =
  #           context.actor ||
  #           (await github.rest.repos
  #             .getCommit({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               ref: context.sha,
  #             }))
  #             .data.author?.login ||
  #           (await github.rest.repos
  #             .getCommit({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               ref: context.sha,
  #             }))
  #             .data.commit.author.name;
  #           core.setOutput("commit_sha", context.sha);
  #           core.setOutput("repository", `${context.repo.owner}/${context.repo.repo}`);
  #           core.setOutput("actor", author);
  #           core.setOutput("branch_ref", context.ref)
  #           core.setOutput("pr_number", isPR ? context.payload.pull_request.number.toString() : "");

      # - name: Trigger Smoke Test Validation
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GH_TOKEN }}
      #     script: |
      #       try {
      #         const result = await github.rest.actions.createWorkflowDispatch({
      #           owner: 'ib-agent',
      #           repo: 'github-workflow',
      #           workflow_id: 'trigger-smoke-test.yaml',
      #           ref: 'main',
      #           inputs: {
      #             environment: "${{ inputs.environment }}",
      #             commit_sha: "${{ steps.context_info.outputs.commit_sha }}",
      #             repository: "${{ steps.context_info.outputs.repository }}",
      #             actor: "${{ steps.context_info.outputs.actor }}",
      #             branch_ref: "${{ steps.context_info.outputs.branch_ref }}",
      #             pr_number: "${{ steps.context_info.outputs.pr_number }}"
      #           }
      #         });
      #         console.log(result);
      #       } catch(error) {
      #         console.error(error);
      #         core.setFailed(error);
      #       }

  trigger_ui_test:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: List workflows on feature branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.actions.listRepoWorkflows({
              owner: 'ib-agent',
              repo:  'github-workflow',
            });
            console.log('ALL WORKFLOWS:', data.workflows.map(w => w.path));
            // Now check filter by ref
            const byRef = await github.request('GET /repos/{owner}/{repo}/actions/workflows?ref={ref}', {
              owner: 'ib-agent',
              repo:  'github-workflow',
              ref:   'KAN-1283-test-UI-invoke-workflow'
            });
            console.log('ON REF:', byRef.data.workflows.map(w => w.path));

      - name: Trigger UI Test Validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: "ib-agent",
                repo: "github-workflow",
                workflow_id: 'trigger-ui-test.yaml',
                ref: 'KAN-1283-test-UI-invoke-workflow',
                inputs: {
                  environment: "${{ inputs.environment }}",
                }
              });
              console.log(result);
            } catch(error) {
              console.error(error);
              core.setFailed(error);
            } 
