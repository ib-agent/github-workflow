name: Post Deployment Tests

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to test'
        required: true
        type: string
      working_dir:
        description: 'The directory of the Lambda function'
        required: false
        default: '.'
        type: string
      role_to_assume:
        description: 'the aws role to assume'
        required: false
        default: ''
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  post-deployment-tests:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          cd tests
          pip install -r requirements_test.txt

      - name: Set role if not provided
        id: set_role
        run: |
          if [ -z "${{ inputs.role_to_assume }}" ]; then
            echo "role=${{ vars.ROLE_TO_ASSUME }}" >> "$GITHUB_OUTPUT"
          else
            echo "role=${{ inputs.role_to_assume }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set_role.outputs.role }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Run tests
        run: |
          cd tests/post-deployment
          pytest

      - name: Get Commit and PR Info
        id: context_info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const isPR = context.eventName === "pull_request";
            const commit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });

            core.setOutput("commit_sha", context.sha);
            core.setOutput("repository", `${context.repo.owner}/${context.repo.repo}`);
            core.setOutput("actor", commit.data.author.login);
            core.setOutput("pr_number", isPR ? context.payload.pull_request.number.toString() : "");

      - name: Trigger Smoke Test Validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: 'ib-agent',
                repo: 'github-workflow',
                workflow_id: 'trigger-smoke-test.yaml',
                ref: '${{ github.ref_name }}',
                inputs: {
                  environment: "${{ inputs.environment }}",
                  commit_sha: "${{ steps.context_info.outputs.commit_sha }}",
                  repository: "${{ steps.context_info.outputs.repository }}",
                  actor: "${{ steps.context_info.outputs.actor }}",
                  pr_number: "${{ steps.context_info.outputs.pr_number }}"
                }
              });
              console.log(result);
            } catch(error) {
              console.error(error);
              core.setFailed(error);
            } 
