name: Post Deployment Tests

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: string
      project_name:
        description: 'Project Name'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  stabilize:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get ECS Cluster Name from SSM
        id: get_cluster_name
        run: |
          CLUSTER_NAME=$(aws ssm get-parameter --name "/common-infrastructure/cabernet_ai_ecs_cluster_id" --query "Parameter.Value" --output text)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Wait for ECS Service to Stabilize
        id: wait
        run: |
          SERVICE_NAME=${{ inputs.project_name }}-service
          echo "Waiting for ECS service $SERVICE_NAME to stabilize..."
          aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services $SERVICE_NAME

  post-deployment-tests:
    needs:
      - stabilize
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: npm install -g newman

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Retrieve Cognito Token
        run: |
          TOKEN=$(./tests/getToken.sh)
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Run Postman tests
        run: |
          newman run tests/postman/${{ inputs.project_name }}.postman_collection.json \
          -e tests/postman/${{ inputs.environment }}.postman_environment.json \
          --env-var "bearer_token=${{ env.TOKEN }}" \
          --bail

      - name: Get Commit Author Info
        id: commit_author
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const commit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });
            core.setOutput("commit_sha", context.sha);
            core.setOutput("repository", `${context.repo.owner}/${context.repo.repo}`);
            core.setOutput("author", commit.data.commit.author.name);

      - name: Trigger Smoke Test Validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: 'ib-agent',
                repo: 'github-workflow',
                workflow_id: 'trigger-smoke-test.yaml',
                ref: 'main',
                inputs: {
                  environment: "${{ inputs.environment }}",
                  commit_sha: "${{ steps.commit_author.outputs.commit_sha }}",
                  repository: "${{ steps.commit_author.outputs.repository }}",
                  actor: "${{ steps.commit_author.outputs.author }}"
                }
              });
              console.log(result);
            } catch(error) {
              console.error(error);
              core.setFailed(error);
            }