name: Publish Lambda Layer

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      working_dir:
        description: 'The directory of the Lambda function'
        required: false
        default: '.'
        type: string
      role_to_assume:
        description: 'the aws role to assume'
        required: false
        default: ''
        type: string

    outputs:
      checksum:
        description: "The checksum of the artifact"
        value: ${{ jobs.upload.outputs.checksum }}


permissions:
  id-token: write
  contents: read

jobs:

  layer:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set role if not provided
        id: set_role
        run: |
          if [ -z "${{ inputs.role_to_assume }}" ]; then
            echo "role=${{ vars.ROLE_TO_ASSUME }}" >> "$GITHUB_OUTPUT"
          else
            echo "role=${{ inputs.role_to_assume }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set_role.outputs.role }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set artifact name
        id: set_artifact_name
        run: |
          echo "artifact_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      - name: Check for requirements.txt and install dependencies
        id: check_requirements
        run: |
          if [ -f "requirements.txt" ]; then
            TEMP_DIR=$(mktemp -d)
            mkdir -p $TEMP_DIR/python
            pip3 install --no-cache-dir \
                         --platform manylinux2014_x86_64 \
                         --implementation cp \
                         --python-version 3.12 \
                         --only-binary=:all: \
                         -r requirements.txt -t $TEMP_DIR/python 

            find python/ -name '*.txt'      -type f -delete
            find python/ -name '*.md'       -type f -delete
            find python/ -name 'tests'      -type d | xargs rm -rf
            find python/ -name '*.dist-info' -type d | xargs rm -rf
            find python/ -name '__pycache__' -type d | xargs rm -rf
            find python/ -name '*.pyc'      -type f -delete     

            cd $TEMP_DIR
            zip -r ../${{ steps.set_artifact_name.outputs.artifact_name }}-layer.zip .
            cp -v ../${{ steps.set_artifact_name.outputs.artifact_name }}-layer.zip ${GITHUB_WORKSPACE}
            rm -rf $TEMP_DIR

            echo "Layer created and zipped as ${{ steps.set_artifact_name.outputs.artifact_name }}-layer.zip" 
            echo "layer_created=true" >> $GITHUB_OUTPUT 
          else
            echo "No requirements.txt found. Skipping layer creation."
          fi

      - name: Upload Lambda layer zip to S3 (if created)
        if: success() && steps.check_requirements.outputs.layer_created == 'true'
        run: |
          aws s3 cp ${GITHUB_WORKSPACE}/${{ steps.set_artifact_name.outputs.artifact_name }}-layer.zip s3://${{ vars.LAMBDA_BUCKET_PREFIX}}-${{ vars.AWS_ACCOUNT_ID}}/${{ steps.set_artifact_name.outputs.artifact_name }}/${{ steps.set_artifact_name.outputs.artifact_name }}-layer.zip

      - name: Publish Lambda layer version
        env:
          WORKING_DIR: ${{ inputs.working_dir }}
        run: |
          zip_file="${GITHUB_WORKSPACE}/${{ steps.set_artifact_name.outputs.artifact_name }}-layer.zip"
          lambda_name="${{ steps.set_artifact_name.outputs.artifact_name }}"
          aws lambda publish-layer-version \
            --layer-name "$lambda_name-layer" \
            --description "Lambda layer for $lambda_name dependencies" \
            --compatible-runtimes python3.12 \
            --zip-file fileb://$zip_file
