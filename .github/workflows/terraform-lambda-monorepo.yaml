name: Terraform

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to build'
        required: true
        type: string
      environment_deploy:
        description: 'The approval environment'
        required: false 
        type: string
        default: 'development'
      version:
        description: 'The version to deploy'
        required: true
        type: string
      checksum:
        description: 'The checksum of the Lambda zip file'
        required: true
        type: string
      working_dir:
        description: 'The directory of the Lambda function'
        required: false
        default: '.'
        type: string
      role_to_assume:
        description: 'the aws role to assume'
        required: false
        default: ''
        type: string
      allow_publish_lambda:
        required: true 
        type: boolean
        default: false
      create_lambda_snapshot:
        required: true 
        type: boolean
        default: false
      lambda_alias_mode:
        required: true
        type: string 
        default: ""

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_deploy }}
    defaults:
      run:
        working-directory: ./${{ inputs.working_dir }}/tf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set role if not provided
        id: set_role
        run: |
          if [ -z "${{ inputs.role_to_assume }}" ]; then
            echo "role=${{ vars.ROLE_TO_ASSUME }}" >> "$GITHUB_OUTPUT"
          else
            echo "role=${{ inputs.role_to_assume }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set_role.outputs.role }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Set up GitHub authentication for Terraform modules
        run: |
          git config --global url."https://$GITHUB_TOKEN:@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Init
        run: ./terraform-init.sh ${{ vars.AWS_ACCOUNT_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set artifact name based on working directory
        id: set_artifact_name
        run: |
          if [ "${{ inputs.working_dir }}" = "." ]; then
            echo "artifact_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          else
            ARTIFACT_NAME=$(basename ${{ inputs.working_dir }})
            echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Detect lambda snapshot alias
        id: snapshot
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          set -euo pipefail
          FN="${{ steps.set_artifact_name.outputs.artifact_name }}"

          # Try to read the 'previous' alias (case-sensitive)
          PREV_VER="$(aws lambda get-alias \
            --function-name "$FN" \
            --name previous \
            --query 'FunctionVersion' \
            --output text 2>/dev/null || echo '')"

          # Sanity checks: only pass a numeric version
          # (ignore empty, null, or $LATEST which would break pinning)
          if [ -n "${PREV_VER}" ] && [ "${PREV_VER}" != "None" ] && [ "${PREV_VER}" != "null" ] && [ "${PREV_VER}" != "\$LATEST" ]; then
            echo "previous_lambda_version=${PREV_VER}"
            echo "previous_lambda_version=${PREV_VER}" >> "$GITHUB_OUTPUT"
            echo "Found PREVIOUS alias version: ${PREV_VER}"
          else
            echo "previous_lambda_version=${PREV_VER}"
            echo "previous_lambda_version=" >> "$GITHUB_OUTPUT"
            echo "No valid PREVIOUS alias found"
          fi

      - name: Terraform Plan
        id: plan
        run: terraform plan -detailed-exitcode -out=plan.tfplan
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TF_VAR_project_name: ${{ steps.set_artifact_name.outputs.artifact_name }}
          TF_VAR_datadog_api_key_secret_arn: ${{ vars.DD_API_KEY_SECRET_ARN }}
          TF_VAR_datadog_site: ${{ vars.DD_SITE }}
          TF_VAR_region: ${{ vars.AWS_REGION }}
          TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_lambda_version: ${{ inputs.version }}
          TF_VAR_lambda_checksum: ${{ inputs.checksum }}
          TF_VAR_previous_lambda_version: ${{ steps.snapshot.outputs.previous_lambda_version }}
          TF_VAR_allow_publish_lambda: ${{ inputs.allow_publish_lambda }}
          TF_VAR_create_lambda_snapshot: ${{ inputs.create_lambda_snapshot }}
          TF_VAR_lambda_alias_mode: ${{ inputs.lambda_alias_mode }}

      - name: Terraform Apply
        if: steps.plan.outputs.exitcode == '2'
        run: terraform apply -auto-approve plan.tfplan
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          TF_VAR_project_name: ${{ steps.set_artifact_name.outputs.artifact_name }}
          TF_VAR_datadog_api_key_secret_arn: ${{ vars.DD_API_KEY_SECRET_ARN }}
          TF_VAR_datadog_site: ${{ vars.DD_SITE }}
          TF_VAR_region: ${{ vars.AWS_REGION }}
          TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_lambda_version: ${{ inputs.version }}
          TF_VAR_lambda_checksum: ${{ inputs.checksum }}
          TF_VAR_previous_lambda_version: ${{ steps.snapshot.outputs.previous_lambda_version }}
          TF_VAR_allow_publish_lambda: ${{ inputs.allow_publish_lambda }}
          TF_VAR_create_lambda_snapshot: ${{ inputs.create_lambda_snapshot }}
          TF_VAR_lambda_alias_mode: ${{ inputs.lambda_alias_mode }}
