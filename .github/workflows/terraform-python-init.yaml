name: Terraform

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      aws_account_id_dev:
        description: 'The AWS account id'
        required: true
        type: string
        default: '905418256626' 
      aws_account_id_prod:
        description: 'The AWS account id'
        required: true
        type: string
        default: '533267144634' 
      aws_region_dev:
        description: 'DEV AWS Region'
        required: true
        type: string
        default: 'us-west-2' 
      aws_region_prod:
        description: 'PROD AWS Region'
        required: true
        type: string
        default: 'us-west-2' 
      role_to_assume:
        description: 'TF Init Dev Role to Assume'
        type: string
        default: 'Python-TF-Init-GitHubActionsRole' 

permissions:
  id-token: write
  contents: read

jobs:
  init:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, production]
    steps:
      - name: Set env
        id: set_env
        run: |
          echo "[INFO] Environment: ${{ matrix.environment }}"
          if [ "${{ matrix.environment }}" == "development" ]; then
            echo "aws_account_id=${{ inputs.aws_account_id_dev }}" >> "$GITHUB_OUTPUT"
            echo "aws_region=${{ inputs.aws_region_dev }}" >> "$GITHUB_OUTPUT"
            role_to_assume="arn:aws:iam::${{ inputs.aws_account_id_dev }}:role/${{ inputs.role_to_assume }}"
            echo "role_to_assume=$role_to_assume" >> "$GITHUB_OUTPUT"
          else
            echo "aws_region=${{ inputs.aws_region_prod }}" >> "$GITHUB_OUTPUT"
            echo "aws_account_id=${{ inputs.aws_account_id_prod }}" >> "$GITHUB_OUTPUT"
            role_to_assume="arn:aws:iam::${{ inputs.aws_account_id_prod }}:role/${{ inputs.role_to_assume }}"
            echo "role_to_assume=$role_to_assume" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set_env.outputs.role_to_assume }}
          aws-region: ${{ steps.set_env.outputs.aws_region }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Check S3 State Bucket exist
        env:
          AWS_ACCOUNT_ID: ${{ steps.set_env.outputs.aws_account_id }}
        run: |
          state_bucket_name="cabernet-ai-$AWS_ACCOUNT_ID-state-bucket"
          # Check if the bucket exists
          if aws s3api head-bucket --bucket $state_bucket_name 2>/dev/null; then
            echo "[INFO] State bucket exists on aws account: $AWS_ACCOUNT_ID"
          else
            echo "[ERROR] State bucket does not exist on aws account: $AWS_ACCOUNT_ID"
            exit 1
          fi

      - name: Check & create DynamoDB Table
        env:
          PROJECT_NAME: ${{ inputs.project_name }} 
        run: |
          # Main Lock State DynamoDB Table
          main_table_name="$PROJECT_NAME-lock-table" 
          if aws dynamodb describe-table --table-name $main_table_name 2>/dev/null; then
            echo "[INFO] DynamoDB table $main_table_name already exists."
          else
            echo "[INFO] Creating DynamoDB table: $main_table_name"
            aws dynamodb create-table --table-name $main_table_name \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi

      - name: Check & create ECR repository
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          AWS_REGION: ${{ steps.set_env.outputs.aws_region }}
        run: |
          # ECR repository
          ecr_repository_name="$PROJECT_NAME-repo"
          if aws ecr describe-repositories --repository-names $ecr_repository_name --region $AWS_REGION 2>/dev/null; then
            echo "[INFO] Repository $ecr_repository_name already exists."
          else
            echo "[INFO] Creating repository: $ecr_repository_name"
            aws ecr create-repository \
              --repository-name $ecr_repository_name \
              --image-scanning-configuration scanOnPush=true \
              --tags Key=Name,Value="cabernet_ai_app_repository" \
              --region $AWS_REGION 
          fi

      - name: Replace value for default policy files 
        working-directory: ./{{ cookiecutter.project_name }}/tf/default-policy
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          AWS_ACCOUNT_ID: ${{ steps.set_env.outputs.aws_account_id }} 
          AWS_REGION: ${{ steps.set_env.outputs.aws_region }}
        run: |
          echo "[INFO] Replace value for default policy files"
          find . -type f -name "*.json" -exec sed -i 's/\${AWS_REGION}/'"$AWS_REGION"'/g; s/\${AWS_ACCOUNT_ID}/'"$AWS_ACCOUNT_ID"'/g; s/\${USER_NAME}/'"$GITHUB_REPOSITORY_OWNER"'/g; s/\${PROJECT_NAME}/'"$PROJECT_NAME"'/g' {} \;
          
      - name: Create GitHubActionsRole for project
        working-directory: ./{{ cookiecutter.project_name }}/tf/default-policy
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          github_action_role="$PROJECT_NAME-GitHubActionsRole"
          policy_file="TrustPolicy.json"
          if aws iam get-role --role-name $github_action_role > /dev/null 2>&1; then
            echo "[INFO] IAM role $github_action_role already exists."
          else
            echo "[INFO] Creating IAM role $github_action_role"
            aws iam create-role \
            --role-name $github_action_role \
            --assume-role-policy-document file://$policy_file 
          fi

      - name: Create GitHubActionsPolicy & attatch to GitHubActionsRole 
        working-directory: ./{{ cookiecutter.project_name }}/tf/default-policy
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          github_action_policy="$PROJECT_NAME-GitHubActionsPolicy"
          github_action_role="$PROJECT_NAME-GitHubActionsRole"
          policy_file="GitHubActionsPolicy.json"
          # check if the policy exists
          if aws iam list-policies --query "policies[?policyname=='$github_action_policy'].policyname" --output text | grep -q $github_action_policy; then
            echo "[INFO] policy $github_action_policy already exists."
          else
            echo "[INFO] Creating policy: $github_action_policy"
            aws iam create-policy --policy-name $github_action_policy --policy-document file://$policy_file
          fi

          policy_arn=$(aws iam list-policies --query "Policies[?PolicyName=='$github_action_policy'].[Arn,PolicyName]" --output text)

          # Check if the policy is attached
          policy_is_attached=$(aws iam list-attached-role-policies --role-name $github_action_role \
              --query "AttachedPolicies[?PolicyArn=='$policy_arn']" --output text)

          # Attach the policy if not attached
          if [ -z "$policy_is_attached" ]; then
              echo "[INFO] Attach $github_action_policy to $github_action_role"
              aws iam attach-role-policy --role-name $github_action_role --policy-arn $policy_arn
          else
              echo "[INFO] $github_action_policy is already attached in $github_action_role."
          fi

      
      - name: Create AccessPolicy & attatch to GitHubActionsRole 
        working-directory: ./{{ cookiecutter.project_name }}/tf/default-policy
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          access_policy="$PROJECT_NAME-AccessPolicy"
          github_action_role="$PROJECT_NAME-GitHubActionsRole"
          policy_file="AccessPolicy.json"
          # check if the policy exists
          if aws iam list-policies --query "policies[?policyname=='$access_policy'].policyname" --output text | grep -q $access_policy; then
            echo "[info] policy $access_policy already exists."
          else
            echo "[info] Creating policy: $access_policy"
            aws iam create-policy --policy-name $access_policy --policy-document file://$policy_file
          fi

          
          policy_arn=$(aws iam list-policies --query "Policies[?PolicyName=='$access_policy'].[Arn,PolicyName]" --output text)

          # Check if the policy is attached
          policy_is_attached=$(aws iam list-attached-role-policies --role-name $github_action_role \
              --query "AttachedPolicies[?PolicyArn=='$policy_arn']" --output text)

          # Attach the policy if not attached
          if [ -z "$policy_is_attached" ]; then
              echo "[INFO] Attach $access_policy to $github_action_role"
              aws iam attach-role-policy --role-name $github_action_role --policy-arn $policy_arn
          else
              echo "[INFO] $access_policy is already attached in $github_action_role."
          fi
