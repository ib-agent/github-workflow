name: Terraform

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      aws_account_id_dev:
        description: 'The AWS account id'
        required: true
        type: string
      aws_account_id_prod:
        description: 'The AWS account id'
        required: true
        type: string
      aws_region_dev:
        description: 'DEV AWS Region'
        required: true
        type: string
      aws_region_prod:
        description: 'PROD AWS Region'
        required: true
        type: string
      role_to_assume:
        description: 'TF Init Dev Role to Assume'
        type: string
        default: 'Python-TF-Init-GitHubActionsRole' 

permissions:
  id-token: write
  contents: read

jobs:
  terraform_init:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, production]
    steps:
      - name: Set env
        id: set_env
        run: |
          echo "[INFO] Environment: ${{ matrix.environment }}"
          if ["${{ matrix.environment }}" == "development" ]; then
            echo "aws_account_id=${{ inputs.aws_account_id_dev }}" >> "$GITHUB_OUTPUT"
            echo "aws_region=${{ inputs.aws_region_dev }}" >> "$GITHUB_OUTPUT"
            role_to_assume="arn:aws:iam::${{ inputs.aws_account_id_dev }}:role/${{ inputs.role_to_assume }}"
            echo "role_to_assume=$role_to_assume" >> "$GITHUB_OUTPUT"
          else
            echo "aws_region=${{ inputs.aws_region_prod }}" >> "$GITHUB_OUTPUT"
            echo "aws_account_id=${{ inputs.aws_account_id_prod }}" >> "$GITHUB_OUTPUT"
            role_to_assume="arn:aws:iam::${{ inputs.aws_account_id_prod }}:role/${{ inputs.role_to_assume }}"
            echo "role_to_assume=$role_to_assume" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up GitHub authentication for Terraform modules
        run: |
          git config --global url."https://$GITHUB_TOKEN:@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Checkout Terraform Modules Repository
        uses: actions/checkout@v3
        with:
          repository: ib-agent/terraform-modules
          path: terraform-modules
          ref: KAN-114-auto-tf-init
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set_env.outputs.role_to_assume }}
          aws-region: ${{ steps.set_env.outputs.aws_region }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Check S3 State Bucket exist
        env:
          AWS_ACCOUNT_ID: ${{ steps.set_env.outputs.aws_account_id }}
        run: |
          state_bucket_name="cabernet-ai-$AWS_ACCOUNT_ID-state-bucket"
          # Check if the bucket exists
          if aws s3api head-bucket --bucket $state_bucket_name 2>/dev/null; then
            echo "[INFO] State bucket exists on aws account: $AWS_ACCOUNT_ID"
          else
            echo "[ERROR] State bucket does not exist on aws account: $AWS_ACCOUNT_ID"
            exit 1
          fi

      - name: Check & create DynamoDB Table if not existed
        env:
          PROJECT_NAME: ${{ inputs.project_name }} 
        run: |
          # Base Lock State DynamoDB Table
          base_table_name="$PROJECT_NAME-base-lock-table" 
          echo "[INFO] Create Base Locking State DynamoDB Table for service: $PROJECT_NAME"
          if aws dynamodb describe-table --table-name $base_table_name 2>/dev/null; then
            echo "DynamoDB table $base_table_name already exists."
          else
            echo "Creating DynamoDB table: $base_table_name"
            aws dynamodb create-table --table-name $base_table_name \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi
          
          # Main Lock State DynamoDB Table
          main_table_name="$PROJECT_NAME-main-lock-table" 
          echo "[INFO] Create Base Locking State DynamoDB Table for service: $PROJECT_NAME"
          if aws dynamodb describe-table --table-name $main_table_name 2>/dev/null; then
            echo "DynamoDB table $main_table_name already exists."
          else
            echo "Creating DynamoDB table: $main_table_name"
            aws dynamodb create-table --table-name $main_table_name \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./terraform-modules/python-service-base 
        run: |
          ./terraform-init.sh $AWS_ACCOUNT_ID 
          sleep 20
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          AWS_ACCOUNT_ID: ${{ steps.set_env.outputs.aws_account_id }}

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform-modules/python-service-base 
        run: terraform plan -detailed-exitcode -out=plan.tfplan
        env:
          TF_VAR_region: ${{ steps.set_env.outputs.aws_region }}
          TF_VAR_aws_account_id: ${{ steps.set_env.outputs.aws_account_id }}
          TF_VAR_project_name: ${{ inputs.project_name }}
          TF_VAR_environment: ${{ matrix.environment }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Apply
        if: steps.plan.outputs.exitcode == '2'
        run: terraform apply -auto-approve plan.tfplan
        env:
          TF_VAR_region: ${{ steps.set_env.outputs.aws_region }}
          TF_VAR_aws_account_id: ${{ steps.set_env.outputs.aws_account_id }}
          TF_VAR_project_name: ${{ inputs.project_name }}
          TF_VAR_environment: ${{ matrix.environment }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
