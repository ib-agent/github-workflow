name: Terraform

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      aws_account_id:
        description: 'The AWS account id'
        required: true
        type: string
      aws_region:
        description: 'AWS Region'
        required: true
        type: string
      role_to_assume:
        description: 'AWS Role to Assume'
        required: true
        type: string
      datadog_site:
        description: 'Datadog site to send to'
        required: true
        type: string
      environment:
        description: 'environment, used in dd tags'
        required: true
        type: string
      main_version:
        description: 'Main version (Blue environment)'
        required: true
        type: string
      service_version:
        description: 'Service version list of application'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Set up GitHub authentication for Terraform modules
        run: |
          git config --global url."https://$GITHUB_TOKEN:@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Init
        run: ./terraform-init.sh ${{ inputs.aws_account_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set the service_version variable
        id: set_service_version
        run: | 
          echo "TF_VAR_service_version=$(echo '${{ inputs.service_version }}' | jq -c .)" >> $GITHUB_ENV
          echo "service_version=${TF_VAR_service_version}"
          echo "service_version=${TF_VAR_service_version}" >> $GITHUB_OUTPUT

      - name: Create service_version.tfvars with service_version value
        working-directory: ./tf
        run: |
          service_version='${{ inputs.service_version }}'
          echo "service_version = $service_version" > service_version.tfvars
          cat service_version.tfvars 

      - name: Terraform Plan
        working-directory: ./tf
        id: plan
        run: terraform plan -detailed-exitcode -out=plan.tfplan -var-file=service_version.tfvars
        env:
          TF_VAR_aws_region: ${{ inputs.aws_region }}
          TF_VAR_aws_account_id: ${{ inputs.aws_account_id }}
          TF_VAR_org_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_org_aws_account_id: ${{ vars.ORG_AWS_ACCOUNT_ID }}
          TF_VAR_project_name: ${{ inputs.project_name }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          TF_VAR_datadog_site: ${{ inputs.datadog_site }}
          TF_VAR_main_version: ${{ inputs.main_version }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Apply
        working-directory: ./tf
        if: steps.plan.outputs.exitcode == '2'
        run: terraform apply -auto-approve plan.tfplan 
        env:
          TF_VAR_aws_region: ${{ inputs.aws_region }}
          TF_VAR_aws_account_id: ${{ inputs.aws_account_id }}
          TF_VAR_org_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_org_aws_account_id: ${{ vars.ORG_AWS_ACCOUNT_ID }}
          TF_VAR_project_name: ${{ inputs.project_name }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          TF_VAR_datadog_site: ${{ inputs.datadog_site }}
          TF_VAR_main_version: ${{ inputs.main_version }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
