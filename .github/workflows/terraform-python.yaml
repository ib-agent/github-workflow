name: Terraform

on:
  workflow_call:
    inputs:
      project_name:
        description: 'The GitHub repository name'
        required: true
        type: string
      aws_account_id:
        description: 'The AWS account id'
        required: true
        type: string
      aws_region:
        description: 'AWS Region'
        required: true
        type: string
      role_to_assume:
        description: 'AWS Role to Assume'
        required: true
        type: string
      dd_site:
        description: 'Datadog site to send to'
        required: true
        type: string
      docker_image:
        description: 'full url to the docker image'
        required: true
        type: string
      environment:
        description: 'environment, used in dd tags'
        required: true
        type: string
      service_version:
        description: 'version, used in dd tags'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Terraform Modules Repository
        uses: actions/checkout@v3
        with:
          repository: ib-agent/terraform-modules
          path: terraform-modules
          ref: KAN-114-auto-tf-init
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Debug AWS credentials configuration
        run: |
          aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Set up GitHub authentication for Terraform modules
        run: |
          git config --global url."https://$GITHUB_TOKEN:@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Replace template with project name 
        working-directory: ./terraform-modules/python-service-main 
        run: |
          # Find all files and replace {{ cookiecutter.project_name }} with $PROJECT_NAME
          find . -type f -exec sed -i "s/{{ cookiecutter\.project_name }}/$PROJECT_NAME/g" {} +
        env:
          PROJECT_NAME: ${{ inputs.project_name }}

      - name: Terraform Init
        working-directory: ./terraform-modules/python-service-main
        run: ./terraform-init.sh ${{ inputs.aws_account_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Plan
        working-directory: ./terraform-modules/python-service-main
        id: plan
        run: terraform plan -detailed-exitcode -out=plan.tfplan
        env:
          TF_VAR_region: ${{ inputs.aws_region }}
          TF_VAR_aws_account_id: ${{ inputs.aws_account_id }}
          TF_VAR_docker_image: ${{ inputs.docker_image }}
          TF_VAR_project_name: ${{ inputs.project_name }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          TF_VAR_datadog_site: ${{ inputs.dd_site }}
          TF_VAR_service_version: ${{ inputs.service_version }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Terraform Apply
        working-directory: ./terraform-modules/python-service-main
        if: steps.plan.outputs.exitcode == '2'
        run: terraform apply -auto-approve plan.tfplan
        env:
          TF_VAR_region: ${{ inputs.aws_region }}
          TF_VAR_aws_account_id: ${{ inputs.aws_account_id }}
          TF_VAR_docker_image: ${{ inputs.docker_image }}
          TF_VAR_project_name: ${{ inputs.project_name }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
          TF_VAR_datadog_site: ${{ inputs.dd_site }}
          TF_VAR_service_version: ${{ inputs.service_version }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
