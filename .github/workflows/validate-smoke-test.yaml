name: Validate Smoke Test 

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  trigger_smoke_test:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Get Commit and PR Info
        id: context_info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const isPR = context.eventName === "pull_request";
            const commit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });

            core.setOutput("commit_sha", context.sha);
            core.setOutput("repository", `${context.repo.owner}/${context.repo.repo}`);
            core.setOutput("actor", commit.data.author.login);
            core.setOutput("branch_ref", context.ref)
            core.setOutput("pr_number", isPR ? context.payload.pull_request.number.toString() : "");

      - name: Trigger Smoke Test Validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: 'ib-agent',
                repo: 'github-workflow',
                workflow_id: 'trigger-smoke-test.yaml',
                ref: 'main',
                inputs: {
                  environment: "${{ inputs.environment }}",
                  commit_sha: "${{ steps.context_info.outputs.commit_sha }}",
                  repository: "${{ steps.context_info.outputs.repository }}",
                  actor: "${{ steps.context_info.outputs.actor }}",
                  branch_ref: "${{ steps.context_info.outputs.branch_ref }}",
                  pr_number: "${{ steps.context_info.outputs.pr_number }}"
                }
              });
              console.log(result);
            } catch(error) {
              console.error(error);
              core.setFailed(error);
            }
